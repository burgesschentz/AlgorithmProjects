// Say you have an array for which the ith element is the price of a given stock on day i.
//
// Design an algorithm to find the maximum profit. You may complete at most two transactions.
//
// Note:
// You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

public class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length == 0){
            return 0;
        }

        if(prices.length == 2){
            return Math.max(prices[1] - prices[0], 0);
        }

        int holding = 0;
        int sold = 1;
        int[][][] dp = new int[2][prices.length][2];

        dp[0][0][holding] = - prices[0];

        int mx = 0;

        if(dp[1].length > 2){
        	dp[1][1][holding] = Integer.MIN_VALUE;
            dp[1][1][sold] = Integer.MIN_VALUE;
        }
        dp[0][0][sold] = Integer.MIN_VALUE;
        for(int i = 1; i < prices.length; i++){
            dp[0][i][holding] = Math.max(dp[0][i - 1][holding], - prices[i]);

            dp[0][i][sold] = Math.max(prices[i] + dp[0][i - 1][holding], dp[0][i - 1][sold]);
            mx = Math.max(mx, dp[0][i][sold]);

            if(i >= 2){
                dp[1][i][holding] = Math.max(dp[0][i - 1][sold] - prices[i], dp[1][i - 1][holding] );
                dp[1][i][sold] = Math.max(dp[1][i - 1][sold], dp[1][i-1][holding] + prices[i]);
                mx = Math.max(mx, dp[1][i][sold]);
            }
        }
        return mx;
    }
}
